// Code generated by protoc-gen-go-flipt-sdk. DO NOT EDIT.

package sdk

import (
	context "context"
	auth "go.flipt.io/flipt/rpc/flipt/auth"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

type AuthClient interface {
	PublicAuthenticationServiceClient() auth.PublicAuthenticationServiceClient
	AuthenticationServiceClient() auth.AuthenticationServiceClient
	AuthenticationMethodTokenServiceClient() auth.AuthenticationMethodTokenServiceClient
	AuthenticationMethodOIDCServiceClient() auth.AuthenticationMethodOIDCServiceClient
	AuthenticationMethodKubernetesServiceClient() auth.AuthenticationMethodKubernetesServiceClient
}

type Auth struct {
	transport AuthClient
}

type PublicAuthenticationService struct {
	transport auth.PublicAuthenticationServiceClient
}

func (s Auth) PublicAuthenticationService() PublicAuthenticationService {
	return PublicAuthenticationService{transport: s.transport.PublicAuthenticationServiceClient()}
}
func (x *PublicAuthenticationService) ListAuthenticationMethods(ctx context.Context) (*auth.ListAuthenticationMethodsResponse, error) {
	return x.transport.ListAuthenticationMethods(ctx, &emptypb.Empty{})
}

type AuthenticationService struct {
	transport auth.AuthenticationServiceClient
}

func (s Auth) AuthenticationService() AuthenticationService {
	return AuthenticationService{transport: s.transport.AuthenticationServiceClient()}
}
func (x *AuthenticationService) GetAuthenticationSelf(ctx context.Context) (*auth.Authentication, error) {
	return x.transport.GetAuthenticationSelf(ctx, &emptypb.Empty{})
}

func (x *AuthenticationService) GetAuthentication(ctx context.Context, id string) (*auth.Authentication, error) {
	return x.transport.GetAuthentication(ctx, &auth.GetAuthenticationRequest{Id: id})
}

func (x *AuthenticationService) ListAuthentications(ctx context.Context, v *auth.ListAuthenticationsRequest) (*auth.ListAuthenticationsResponse, error) {
	return x.transport.ListAuthentications(ctx, v)
}

func (x *AuthenticationService) DeleteAuthentication(ctx context.Context, id string) error {
	_, err := x.transport.DeleteAuthentication(ctx, &auth.DeleteAuthenticationRequest{Id: id})
	return err
}

func (x *AuthenticationService) ExpireAuthenticationSelf(ctx context.Context, expiresAt *timestamppb.Timestamp) error {
	_, err := x.transport.ExpireAuthenticationSelf(ctx, &auth.ExpireAuthenticationSelfRequest{ExpiresAt: expiresAt})
	return err
}

type AuthenticationMethodTokenService struct {
	transport auth.AuthenticationMethodTokenServiceClient
}

func (s Auth) AuthenticationMethodTokenService() AuthenticationMethodTokenService {
	return AuthenticationMethodTokenService{transport: s.transport.AuthenticationMethodTokenServiceClient()}
}
func (x *AuthenticationMethodTokenService) CreateToken(ctx context.Context, v *auth.CreateTokenRequest) (*auth.CreateTokenResponse, error) {
	return x.transport.CreateToken(ctx, v)
}

type AuthenticationMethodOIDCService struct {
	transport auth.AuthenticationMethodOIDCServiceClient
}

func (s Auth) AuthenticationMethodOIDCService() AuthenticationMethodOIDCService {
	return AuthenticationMethodOIDCService{transport: s.transport.AuthenticationMethodOIDCServiceClient()}
}
func (x *AuthenticationMethodOIDCService) AuthorizeURL(ctx context.Context, v *auth.AuthorizeURLRequest) (*auth.AuthorizeURLResponse, error) {
	return x.transport.AuthorizeURL(ctx, v)
}

func (x *AuthenticationMethodOIDCService) Callback(ctx context.Context, v *auth.CallbackRequest) (*auth.CallbackResponse, error) {
	return x.transport.Callback(ctx, v)
}

type AuthenticationMethodKubernetesService struct {
	transport auth.AuthenticationMethodKubernetesServiceClient
}

func (s Auth) AuthenticationMethodKubernetesService() AuthenticationMethodKubernetesService {
	return AuthenticationMethodKubernetesService{transport: s.transport.AuthenticationMethodKubernetesServiceClient()}
}
func (x *AuthenticationMethodKubernetesService) VerifyServiceAccount(ctx context.Context, serviceAccountToken string) (*auth.VerifyServiceAccountResponse, error) {
	return x.transport.VerifyServiceAccount(ctx, &auth.VerifyServiceAccountRequest{ServiceAccountToken: serviceAccountToken})
}
